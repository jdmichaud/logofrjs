// Jean-Daniel Michaud - 2015
//
// The simplified french logo grammar in peg.js format

program =
  i:( instruction ) * {
    return {
      type: "PROGRAM",
      instrutions: i
    };
  }
keyword =
  k:[a-zA-Z]+ { return k.join(''); }
//  "AVANCE" / "AV" / "avance" / "av"
//  / "RECULE" / "RE" / "recule" / "re"
//  / "TOURNEDROITE" / "TD" / "tournedroite" / "td"
//  / "TOURNEGAUCHE" / "TG" / "tournegauche" / "tg"
//  / "LEVECRAYON" / "LC" / "levecrayon" / "tc"
//  / "BAISSECRAYON" / "BC" / "baissecrayon" / "bc"
integer =
  [0-9]+
// Whitespaces
ws =
  [ \t  ]
// Matches any number of whitespace/comments in a row
_  =
  (ws)*
// newlines are our only instruction separator
newline =
  [\n\r\u2028\u2029]
sourceCharacter
  = .
comment
  = "//" (!newline sourceCharacter)*
arg_instruction =
  k:keyword _ digits:integer _ newline? {
    return {
      type: "INSTRUCTION",
      command: k,
      arg: parseInt(digits.join(""), 10)
    };
  }
noarg_instruction =
  k:keyword _ newline? {
    return {
      type: "INSTRUCTION",
      command: k,
    };
  }
null_instruction = 
  comment _? newline? {
    return {};
  }
  / _? newline {
    return {};
  }
// Define what is an instruction
instruction =
  noarg_instruction
  / arg_instruction
  / null_instruction
